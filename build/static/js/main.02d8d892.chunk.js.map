{"version":3,"sources":["component/Nav.js","component/SpaceX.js","component/Launches.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","React","Component","Space","Launches","className","this","props","launchData","flight_number","mission_name","launch_site","site_name_long","launch_date_local","Main","launchArray","map","grabLaunch","key","apiUrl","intApiUrl","App","pullLaunches","fetch","then","response","json","jData","setState","catch","err","console","log","pullStuff","notes","state","view","page","pageTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4MAoCeA,E,iLAlBX,OACE,6BACE,6BACE,wCAEA,gDAEA,oD,GAdQC,IAAMC,WCkBTC,E,iLAXX,OACE,kD,GARcF,IAAMC,WCsBXE,E,iLAdX,OACE,yBAAKC,UAAU,kBAAf,WACSC,KAAKC,MAAMC,WAAWC,cAD/B,IAC8C,6BAD9C,iBAEeH,KAAKC,MAAMC,WAAWE,aAFrC,IAEmD,6BAFnD,aAGWJ,KAAKC,MAAMC,WAAWG,YAAYC,eAH7C,IAG6D,6BAH7D,SAION,KAAKC,MAAMC,WAAWK,kBAJ7B,IAIgD,kC,GAb/BZ,IAAMC,W,ICoCdY,E,iLArBX,OACE,yDAEA,kBAAC,EAAD,MACE,yBAAKT,UAAU,OACf,yBAAKA,UAAU,cACdC,KAAKC,MAAMQ,YAAYC,KAAI,SAACC,GAAD,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAAWR,cAChBD,WAAYS,c,GAfLhB,IAAMC,WCLrBiB,EAAS,wCACTC,EAAY,4CAiEDC,E,YA7Db,WAAYd,GAAO,IAAD,8BAChB,4CAAMA,KAURe,aAAe,WACXC,MAAM,GAAD,OAAIJ,IACRK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZb,YAAaY,OAIhBE,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,OApBV,EAuBlBG,UAAY,WACRV,MAAM,GAAD,OAAIH,IACRI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZM,MAAOP,IAETI,QAAQC,IAAI,EAAKG,MAAMD,UAExBL,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,OA9B1B,EAAKK,MAAQ,CACXpB,YAAa,GACbqB,KAAM,CACJC,KAAM,OACNC,UAAW,YANC,E,iFAmChBhC,KAAKgB,eACLhB,KAAK2B,c,+BASL,OACE,yBAAK5B,UAAU,aAAf,8BAC4BC,KAAK6B,MAAMD,MACrC,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAMnB,YAAaT,KAAK6B,MAAMpB,mB,GAnDpBd,IAAMC,WCPJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.02d8d892.chunk.js","sourcesContent":["// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'\n\n// components\n\n// =============================\n// COMPONENT CLASS\n// =============================\nclass Nav extends React.Component{\n\n\n//// ==============\n//// RENDER\n//// ==============\n  render (){\n    return (\n      <div>\n        <nav>\n          <button>Home\n          </button>\n          <button>About SpaceX\n          </button>\n          <button>About Team\n          </button>\n        </nav>\n      </div>\n    )\n  }\n}\n\n// =============================\n// EXPORT\n// =============================\nexport default Nav\n","// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'\n\n// components\n\n// =============================\n// COMPONENT CLASS\n// =============================\nclass Space extends React.Component{\n\n\n//// ==============\n//// RENDER\n//// ==============\n  render (){\n    return (\n      <div>\n        About SpaceX.\n      </div>\n    )\n  }\n}\n\n// =============================\n// EXPORT\n// =============================\nexport default Space\n","// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'\n\n// components\n\n// =============================\n// COMPONENT CLASS\n// =============================\nclass Launches extends React.Component{\n\n\n\n//// ==============\n//// RENDER\n//// ==============\n  render (){\n    return (\n      <div className=\"card blue-grey\">\n      Number: {this.props.launchData.flight_number} <br/>\n      Mission Name: {this.props.launchData.mission_name} <br/>\n      Location: {this.props.launchData.launch_site.site_name_long} <br/>\n      Date: {this.props.launchData.launch_date_local} <br/>\n      </div>\n    )\n  }\n}\n\n// =============================\n// EXPORT\n// =============================\nexport default Launches\n","// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'\n\n// components\nimport Space from './SpaceX'\nimport Launches from './Launches'\n// =============================\n// COMPONENT CLASS\n// =============================\n// BaseURL Definer\nlet baseUrl = '';\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://localhost:8888'\n} else {\n  baseUrl = 'https://turbo-spork-app.herokuapp.com/'\n}\n\nclass Main extends React.Component{\n\n//// ==============\n//// RENDER\n//// ==============\n  render (){\n    return (\n      <div>\n        This is the main section.\n      <Space />\n        <div className=\"row\">\n        <div className=\"col s12 m6\">\n        {this.props.launchArray.map((grabLaunch) =>\n          <Launches\n            key={grabLaunch.flight_number}\n            launchData={grabLaunch}\n          />\n        )}\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n// =============================\n// EXPORT\n// =============================\nexport default Main\n","// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react';\n\n// components\nimport Nav from './component/Nav'\nimport Main from './component/Main'\n\n// =============================\n// COMPONENT CLASS\n// =============================\n\n// ExternalAPI-URL Definer\nlet apiUrl = 'wss://api.spacexdata.com/v3/launches/';\nlet intApiUrl = 'http://turbo-spork-app.herokuapp.com/api/'\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      launchArray: [],\n      view: {\n        page: 'home',\n        pageTitle: 'on load'\n      }\n    }\n  }\n  //returns entire launch array, currently approx 100+ items\n  pullLaunches = () => {\n      fetch(`${apiUrl}`)\n      .then(response => response.json())\n      .then(jData => {\n        this.setState({\n          launchArray: jData\n        })\n        // console.log(this.state.launchArray);\n      })\n      .catch(err=>console.log(err))\n    }\n\n  pullStuff = () => {\n      fetch(`${intApiUrl}`)\n      .then(response => response.json())\n      .then(jData => {\n        this.setState({\n          notes: jData\n        })\n        console.log(this.state.notes);\n      })\n      .catch(err=>console.log(err))\n    }\n  componentDidMount() {\n    this.pullLaunches()\n    this.pullStuff()\n  }\n\n\n\n//// ==============\n//// RENDER\n//// ==============\n  render(){\n    return(\n      <div className=\"container\">\n      This is some notess maybe: {this.state.notes}\n        <Nav />\n        {/* this is a comment? */}\n        <Main launchArray={this.state.launchArray}/>\n\n\n      </div>\n    )\n  }\n}\n\n// =============================\n// EXPORT\n// =============================\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}